name: Train-Pipeline
on:
  push:
  pull_request:
    branches:
    - layers
    - branch_01
    - main
  workflow_dispatch:
  # Allows external webhook trigger
  repository_dispatch:
    types:
      - webhook
jobs:
  unitary_test_job:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.14

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn[standard] mlflow scikit-learn pandas matplotlib pytest pycodestyle tensorflow numpy

      - name: Test files
        run: |
          pytest PRATICA/test_train.py -p no:warnings  
          pytest PRATICA/test_train2.py -p no:warnings

  # check_python_code_style_job:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0
  #
  #     - name: Set up Python 3.10
  #       uses: actions/setup-python@v5
  #       with:
  #         python-version: 3.10.14
  #
  #     - name: Install dependencies
  #       run: |
  #         python -m pip install --upgrade pip
  #         pip install fastapi uvicorn[standard] mlflow scikit-learn pandas matplotlib pytest pycodestyle tensorflow
  #
  #     - name: Validate Python Code Style
  #       run: |
  #         pycodestyle . --ignore=E501

  train_job:
    runs-on: ubuntu-latest
    #needs: [unitary_test_job, check_python_code_style_job]
    needs: [unitary_test_job]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: 3.10.14

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install fastapi uvicorn[standard] mlflow scikit-learn pandas matplotlib pytest pycodestyle tensorflow numpy

      - name: Train Model
        run: |
          python PRATICA/train2.py
          

#  build_image:
#    runs-on: ubuntu-latest
#    needs: [train_job]
#    steps:
#      # Faz o checkout do código fonte do repositório
#      - uses: actions/checkout@v4
#        with:
#          fetch-depth: 0

      # Realiza login no Docker Hub usando segredos definidos no repositório
#      - name: docker login
#        run: |
          # Executa o comando de login no Docker Hub utilizando usuário e senha armazenados nos segredos do repositório
#          docker login -u ${{secrets.DOCKER_USER}} -p ${{secrets.DOCKER_PASSWORD}}

      # Constrói a imagem Docker usando o Dockerfile presente no repositório
#     - name: Build the Docker image
#        run: |
          # Constrói a imagem Docker com a tag definida pelo usuário e nome da imagem vindos dos segredos
#          docker build . --file Dockerfile --tag ${{secrets.DOCKER_USER}}/${{secrets.DOCKER_IMAGE_NAME}}

      # Faz o push da imagem Docker construída para o Docker Hub
 #     - name: Docker Push
 #       run: |
          # Realiza o push da imagem Docker para o repositório do Docker Hub
 #         docker push ${{secrets.DOCKER_USER}}/${{secrets.DOCKER_IMAGE_NAME}}
